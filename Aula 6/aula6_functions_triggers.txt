/*Funcoes e Trigger*/

create table empregado(id_empregado serial primary key,
nome varchar(60)not null, sobrenome varchar(40)not null,
email varchar(50) not null unique, cargo varchar(40),
salario numeric
);

INSERT INTO empregado (nome,sobrenome,email,cargo,salario) values ('Jos√©', 'Ciclano', 'ciclano@teste.com', 'Programador',5000.);
INSERT INTO empregado (nome,sobrenome,email,cargo,salario) values ('Antonio', 'Silva', 'silva@gmail.com', 'Analista de Sistemas',6000.);
INSERT INTO empregado (nome,sobrenome,email,cargo,salario) values ('Marina', 'Oliveira', 'm@gmail.com', 'DBA',9000.)
;

create table empregado_auditoria(id_empregado_auditoria serial primary key,
id_empregado int,
nome varchar(60)not null, 
modificacaoem date,
salario numeric
);

/*funcao que salva o valor velho quando atualiza e registra*/
create or replace function empregado_atua_sal_func()
returns trigger 
as $$
	begin 
		insert into empregado_auditoria (id_empregado, nome, salario, modificacaoem)
		values(old.id_empregado, old.nome, old.salario, now());
		return new;
	end;
$$ language 'plpgsql';

/* trigger que chama a funcao criada acima*/
create trigger atualiza_salario
after update on empregado
for each row 
execute procedure empregado_atua_sal_func();

/* teste para aumentar o salario em 20% */
update empregado set salario = salario*1.2

select * from empregado

select * from empregado_auditoria

/* uma table/funcion/trigger para registrar os funcionarios apagados */

create table empregado_auditoria_delete(id_empregado_auditoria_delete serial primary key,
id_empregado int,
nome varchar(60)not null, sobrenome varchar(40)not null,
email varchar(40)not null unique, cargo varchar(40),
data date,
salario numeric
);

create or replace function empregado_del_func()
returns trigger 
as $$
	begin 
		insert into empregado_auditoria_delete (id_empregado, nome, sobrenome, cargo, salario, data)
		values(old.id_empregado, old.nome, old.sobrenome, old.cargo, old.salario, now());
		return new;
	end;
$$ language 'plpgsql';

create trigger apagar_empregado
after delete on empregado
for each row
execute procedure empregado_del_func();

delete from empregado 
where id_empregado=1;

select * from empregado;
select * from empregado_auditoria_delete;

/**/
